/*
import '../styles/Boards.css';
import { useState } from 'react';

//import { projectsActions } from '../features/projects';

function Boards(props) {
  const [le, setle] = useState({ x: 0, y: 0 });
  const [og, setog] = useState({ x: 0, y: 0 });
  const container = document.getElementById('container');
  const el = document.getElementById('drag');
  const d = 'dragging';
  var cOffX = 0;
  var cOffY = 0;
  function dragMove(e) {
    e = e || window.event;
    e.preventDefault();

    el.style.top = (e.clientY - cOffY).toString() + 'px';
    el.style.left = (e.clientX - cOffX).toString() + 'px';
  }
  const ds = (e) => {
    e.dataTransfer.setDragImage(e.target, -5000, -5000);
  };
  const en = () => {
    setle({ x: 0, y: 0 });
  };
  const drag = (e) => {
    //e = e || window.event;
    // e.preventDefault();
    //console.log(e.clientX, e.clientY);

    if (og.x === 0) {
      var rect = e.target.getBoundingClientRect();
      let v = { x: rect.left, y: rect.top };
      setog(v);
      let newNum = {
        x: Math.floor(e.clientX - rect.left),
        y: Math.floor(e.clientY - rect.top),
      };
      setle(newNum);
    }
    // console.log(og);
    //console.log(rect.top, rect.right, rect.bottom, rect.left);
    // console.log(Math.round(e.clientX - og.x), Math.round(e.clientY - og.y));
    let newNum = {
      x: Math.floor(e.clientX - og.x),
      y: Math.floor(e.clientY - og.y),
    };
    setle(newNum);

    // cOffX = e.clientX - el.offsetLeft;
    //cOffY = e.clientY - el.offsetTop;

    // document.addEventListener('mousemove', dragMove);
    // document.addEventListener('mouseup', dragEnd);

    // el.classList.add(d);
    //container.style.cursor = 'move';
    // if (!vis) {
    // let data = event.target.getAttribute('data');
    //props.getNums(data);
    //return setvis(1);
    //}
  };

  return (
    <div
      className="boardContainer"
      draggable={true}
      onDrag={drag}
      onDragOver={() => {
        props.getNums(props.index);
      }}
      onDragStart={ds}
      onDragEnd={en}
      data={props.index}
      style={{ top: le.y, left: le.x }}
    >
      <div>
        {props.element.name}
        <button
          onClick={() => {
            props.deleteBoard(props.index);
          }}
        >
          delete
        </button>
      </div>
      <button
        onClick={() => {
          props.addBoard('new');
        }}
      >
        add new
      </button>
    </div>
  );
}

export default Boards;
*/
/*
function Boards(props) {
  const [vis, setvis] = useState(false);
  const [on, seton] = useState(false);

  const drag = (event) => {
    if (!vis) {
      let data = event.target.getAttribute('data');
      props.getNums(data);
      return setvis(1);
    }
  };

  const dragHasEnded = () => {
    if (vis === 1) {
      setvis(0);
    }
  };
  const dragOver = (event) => {
    let data = event.target.getAttribute('data');

    props.getNums(data);
    //setovernum(data);
  };

  return (
    <div
      className="boardContainer"
      draggable={true}
      onDrag={drag}
      onDragEnd={() => {
        return setvis(!vis);
      }}
      onDragEnter={() => {
        console.log(props.index);
        if (!on) {
          seton(true);
        }
        // return props.getNums(props.index);
      }}
      onDragLeave={() => {
        seton(false);

        // return props.getNums(props.index);
      }}
      data={props.index}
      style={{
        visibility: !vis ? 'visible' : 'hidden',
        backgroundColor: !on ? 'green' : 'blue',
      }}
    >
      <div>
        {props.element.name}
        <button
          onClick={() => {
            props.deleteBoard(props.index);
          }}
        >
          delete
        </button>
      </div>
      <button
        onClick={() => {
          props.addBoard('new');
        }}
      >
        add new
      </button>
    </div>
  );
}

export default Boards;


*/
